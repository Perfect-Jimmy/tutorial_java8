类是对象吗?
类是java.lang.Class类的实例对象,而Class是所有类的类

普通对象获取: new关键字
Book book = new Book();

Class对象获取: 只有JVM可以创建Class的对象,因此不可以像普通类一样new一个Class对象
1. Class c1 = Book.class;                   //通过获取类的静态成员变量class得到
2. Class c2 = book2.getClass();             //通过一个类的对象的getClass()方法获得
3. Class c3 = Class.forName("com.xxx.Book");//通过一个类的全量限定名获得

c1,c2,c3都是Class的对象,完全一样,叫做Book的类类型


类类型是反射的基础,类类型是反射的基础,类类型是反射的基础


创建对象的5种方式:
1. new关键字                        →调用了构造函数
   Book book1 = new Book();
2. Class类的newInstance方法         →调用了构造函数
   Book book2 = (Book)Class.forName("com.xxx.Book").newInstance();
3. Constructor类的newInstance方法   →调用了构造函数
   Constructor<Book> constructor = Book.class.getConstructor();
   Book book3 = constructor.newInstance();
4. clone方法                        → 没有调用构造函数
   Book book4 = (Book) book3.clone();
5. 反序列化                          → 没有调用构造函数
   ObjectInputStream in = new ObjectInputStream(new FileInputStream("data.obj"));
   Book book5 = (Book) in.readObject();


反射获取类的信息:属性和方法
1. 成员方法的信息包括:返回值+方法名+参数类型
   类的成员方法也是一个对象,它是java.lang.reflect.Method的一个对象,通过java.lang.reflect.Method里面封装的方法来获取这些信息

2. 成员变量的信息包括:成员变量类型+成员变量名
   类的成员变量也是一个对象,它是java.lang.reflect.Field的一个对象,通过java.lang.reflect.Field里面封装的方法来获取这些信息
